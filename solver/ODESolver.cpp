/* Generated by Cython 0.11.2 on Tue Nov  8 16:34:46 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
       void *buf;
       PyObject *obj;
       Py_ssize_t len;
       Py_ssize_t itemsize;
       int readonly;
       int ndim;
       char *format;
       Py_ssize_t *shape;
       Py_ssize_t *strides;
       Py_ssize_t *suboffsets;
       void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyString_Type                PyBytes_Type
  #define PyString_CheckExact          PyBytes_CheckExact
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define PyBytes_Type                 PyString_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#else
  #define _USE_MATH_DEFINES
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#include <math.h>
#define __PYX_HAVE_API__ODESolver
#include "Defs.hpp"
#include "Function.hpp"
#include "PythonFunction.hpp"
#include "numpy/ndarrayobject.h"
#include "numpy/arrayobject.h"
#include "ODESolver.hpp"
#include "CallStep.hpp"
#define __PYX_USE_C99_COMPLEX defined(_Complex_I)


#ifdef __GNUC__
#define INLINE __inline__
#elif _WIN32
#define INLINE __inline
#else
#define INLINE 
#endif

typedef struct {PyObject **p; char *s; long n; char is_unicode; char intern; char is_identifier;} __Pyx_StringTabEntry; /*proto*/



static int __pyx_skip_dispatch = 0;


/* Type Conversion Predeclarations */

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyBytes_FromString          PyString_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyString_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyString_AsString
#else
#define __Pyx_PyBytes_FromString          PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyBytes_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyBytes_AsString
#endif

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

#if !defined(T_PYSSIZET)
#if PY_VERSION_HEX < 0x02050000
#define T_PYSSIZET T_INT
#elif !defined(T_LONGLONG)
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))  ? T_INT  : \
        ((sizeof(Py_ssize_t) == sizeof(long)) ? T_LONG : -1))
#else
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))          ? T_INT      : \
        ((sizeof(Py_ssize_t) == sizeof(long))         ? T_LONG     : \
        ((sizeof(Py_ssize_t) == sizeof(PY_LONG_LONG)) ? T_LONGLONG : -1)))
#endif
#endif

#if !defined(T_SIZET)
#if !defined(T_ULONGLONG)
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))  ? T_UINT  : \
        ((sizeof(size_t) == sizeof(unsigned long)) ? T_ULONG : -1))
#else
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))          ? T_UINT      : \
        ((sizeof(size_t) == sizeof(unsigned long))         ? T_ULONG     : \
        ((sizeof(size_t) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))
#endif
#endif

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;

static char __pyx_mdoc[] = "\n$Header: /home/takeuchi/0613/solver/ODESolver.pyx,v 1.2 2011/10/06 01:42:02 takeuchi Exp takeuchi $\n";


#ifdef CYTHON_REFNANNY
typedef struct {
  void (*INCREF)(void*, PyObject*, int);
  void (*DECREF)(void*, PyObject*, int);
  void (*GOTREF)(void*, PyObject*, int);
  void (*GIVEREF)(void*, PyObject*, int);
  void* (*NewContext)(const char*, int, const char*);
  void (*FinishContext)(void**);
} __Pyx_RefnannyAPIStruct;
static __Pyx_RefnannyAPIStruct *__Pyx_Refnanny = NULL;
#define __Pyx_ImportRefcountAPI(name)   (__Pyx_RefnannyAPIStruct *) PyCObject_Import((char *)name, (char *)"RefnannyAPI")
#define __Pyx_INCREF(r) __Pyx_Refnanny->INCREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_DECREF(r) __Pyx_Refnanny->DECREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GOTREF(r) __Pyx_Refnanny->GOTREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GIVEREF(r) __Pyx_Refnanny->GIVEREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_XDECREF(r) if((r) == NULL) ; else __Pyx_DECREF(r)
#define __Pyx_SetupRefcountContext(name)   void* __pyx_refchk = __Pyx_Refnanny->NewContext((name), __LINE__, __FILE__)
#define __Pyx_FinishRefcountContext()   __Pyx_Refnanny->FinishContext(&__pyx_refchk)
#else
#define __Pyx_INCREF(r) Py_INCREF(r)
#define __Pyx_DECREF(r) Py_DECREF(r)
#define __Pyx_GOTREF(r)
#define __Pyx_GIVEREF(r)
#define __Pyx_XDECREF(r) Py_XDECREF(r)
#define __Pyx_SetupRefcountContext(name)
#define __Pyx_FinishRefcountContext()
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) if((r) == NULL) ; else __Pyx_GIVEREF(r)
#define __Pyx_XGOTREF(r) if((r) == NULL) ; else __Pyx_GOTREF(r)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static INLINE char __Pyx_PyInt_AsChar(PyObject *);

static INLINE short __Pyx_PyInt_AsShort(PyObject *);

static INLINE int __Pyx_PyInt_AsInt(PyObject *);

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static INLINE long __Pyx_PyInt_AsLong(PyObject *);

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, long size);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Type declarations */

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":61
 * 
 * 
 * cdef class ODESolver:             # <<<<<<<<<<<<<<
 *     '''Wrapper class of ODESolver'''
 *     cdef c_Solver *thisptr
 */

struct __pyx_obj_9ODESolver_ODESolver {
  PyObject_HEAD
  ODESolver *thisptr;
};
/* Module declarations from numpy */

/* Module declarations from ODESolver */

static PyTypeObject *__pyx_ptype_9ODESolver_ndarray = 0;
static PyTypeObject *__pyx_ptype_9ODESolver_ODESolver = 0;
#define __Pyx_MODULE_NAME "ODESolver"
int __pyx_module_is_main_ODESolver = 0;

/* Implementation of ODESolver */
static char __pyx_k___main__[] = "__main__";
static PyObject *__pyx_kp___main__;
static char __pyx_k___cinit__[] = "__cinit__";
static PyObject *__pyx_kp___cinit__;
static char __pyx_k___del__[] = "__del__";
static PyObject *__pyx_kp___del__;
static char __pyx_k_register_function[] = "register_function";
static PyObject *__pyx_kp_register_function;
static char __pyx_k_initialize[] = "initialize";
static PyObject *__pyx_kp_initialize;
static char __pyx_k_get_variable_array[] = "get_variable_array";
static PyObject *__pyx_kp_get_variable_array;
static char __pyx_k_get_variable[] = "get_variable";
static PyObject *__pyx_kp_get_variable;
static char __pyx_k_get_current_time[] = "get_current_time";
static PyObject *__pyx_kp_get_current_time;
static char __pyx_k_get_step_interval[] = "get_step_interval";
static PyObject *__pyx_kp_get_step_interval;
static char __pyx_k_integrate[] = "integrate";
static PyObject *__pyx_kp_integrate;
static char __pyx_k_step[] = "step";
static PyObject *__pyx_kp_step;
static char __pyx_k_reschedule[] = "reschedule";
static PyObject *__pyx_kp_reschedule;
static char __pyx_k_1[] = "register_status_event";
static PyObject *__pyx_kp_1;
static char __pyx_k_set_next_time[] = "set_next_time";
static PyObject *__pyx_kp_set_next_time;
static char __pyx_k_set_step_interval[] = "set_step_interval";
static PyObject *__pyx_kp_set_step_interval;
static char __pyx_k_get_next_time[] = "get_next_time";
static PyObject *__pyx_kp_get_next_time;
static char __pyx_k_callable[] = "callable";
static PyObject *__pyx_kp_callable;
static char __pyx_k_py_variable_array[] = "py_variable_array";
static PyObject *__pyx_kp_py_variable_array;
static char __pyx_k_index[] = "index";
static PyObject *__pyx_kp_index;
static char __pyx_k_a_time[] = "a_time";
static PyObject *__pyx_kp_a_time;
static char __pyx_k_py_status_event[] = "py_status_event";
static PyObject *__pyx_kp_py_status_event;
static char __pyx_k_hoge[] = "hoge";
static PyObject *__pyx_kp_hoge;
static char __pyx_k_2[] = "ODESolver";
static PyObject *__pyx_kp_2;
static char __pyx_k___all__[] = "__all__";
static PyObject *__pyx_kp___all__;
static char __pyx_k_Exception[] = "Exception";
static PyObject *__pyx_kp_Exception;
static char __pyx_k_3[] = "id";
static PyObject *__pyx_kp_3;
static char __pyx_k_4[] = "thres";
static PyObject *__pyx_kp_4;
static char __pyx_k_5[] = "code";
static PyObject *__pyx_kp_5;
static PyObject *__pyx_builtin_Exception;

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":65
 *     cdef c_Solver *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new_Solver()
 * 
 */

static int __pyx_pf_9ODESolver_9ODESolver___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9ODESolver_9ODESolver___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_SetupRefcountContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":66
 * 
 *     def __cinit__(self):
 *         self.thisptr = new_Solver()             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
  ((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr = new ODESolver();

  __pyx_r = 0;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":68
 *         self.thisptr = new_Solver()
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         del_Solver(self.thisptr)
 * 
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver___del__(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9ODESolver_9ODESolver___del__(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__del__");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":69
 * 
 *     def __del__(self):
 *         del_Solver(self.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def register_function(self, callable):
 */
  delete(((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":71
 *         del_Solver(self.thisptr)
 * 
 *     def register_function(self, callable):             # <<<<<<<<<<<<<<
 *         '''Set a first order ordinal diferential equation.'''
 *         cdef c_PythonFunction* pyfun = new_PythonFunction(callable)
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_register_function(PyObject *__pyx_v_self, PyObject *__pyx_v_callable); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_register_function[] = "Set a first order ordinal diferential equation.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_register_function(PyObject *__pyx_v_self, PyObject *__pyx_v_callable) {
  PythonFunction *__pyx_v_pyfun;
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("register_function");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":73
 *     def register_function(self, callable):
 *         '''Set a first order ordinal diferential equation.'''
 *         cdef c_PythonFunction* pyfun = new_PythonFunction(callable)             # <<<<<<<<<<<<<<
 *         self.thisptr.register_function(<c_Function*>pyfun)
 * 
 */
  __pyx_v_pyfun = new PythonFunction(__pyx_v_callable);

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":74
 *         '''Set a first order ordinal diferential equation.'''
 *         cdef c_PythonFunction* pyfun = new_PythonFunction(callable)
 *         self.thisptr.register_function(<c_Function*>pyfun)             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, ndarray py_variable_array):
 */
  ((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->register_function(((Function *)__pyx_v_pyfun));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":76
 *         self.thisptr.register_function(<c_Function*>pyfun)
 * 
 *     def initialize(self, ndarray py_variable_array):             # <<<<<<<<<<<<<<
 *         '''Initialize solver
 *         Set variables.
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_initialize(PyObject *__pyx_v_self, PyObject *__pyx_v_py_variable_array); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_initialize[] = "Initialize solver\n        Set variables.\n        ";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_initialize(PyObject *__pyx_v_self, PyObject *__pyx_v_py_variable_array) {
  double *__pyx_v_variable_array;
  int __pyx_v_dimension;
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("initialize");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_variable_array), __pyx_ptype_9ODESolver_ndarray, 1, "py_variable_array", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":80
 *         Set variables.
 *         '''
 *         cdef double *variable_array = <double *>py_variable_array.data             # <<<<<<<<<<<<<<
 *         cdef int dimension = py_variable_array.dimensions[0]
 *         self.thisptr.initialize(variable_array, dimension)
 */
  __pyx_v_variable_array = ((double *)((PyArrayObject *)__pyx_v_py_variable_array)->data);

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":81
 *         '''
 *         cdef double *variable_array = <double *>py_variable_array.data
 *         cdef int dimension = py_variable_array.dimensions[0]             # <<<<<<<<<<<<<<
 *         self.thisptr.initialize(variable_array, dimension)
 * 
 */
  __pyx_v_dimension = (((PyArrayObject *)__pyx_v_py_variable_array)->dimensions[0]);

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":82
 *         cdef double *variable_array = <double *>py_variable_array.data
 *         cdef int dimension = py_variable_array.dimensions[0]
 *         self.thisptr.initialize(variable_array, dimension)             # <<<<<<<<<<<<<<
 * 
 *     def get_variable_array(self, ndarray py_variable_array):
 */
  ((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->initialize(__pyx_v_variable_array, __pyx_v_dimension);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ODESolver.ODESolver.initialize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":84
 *         self.thisptr.initialize(variable_array, dimension)
 * 
 *     def get_variable_array(self, ndarray py_variable_array):             # <<<<<<<<<<<<<<
 *         '''Get the variables.'''
 *         cdef double *variable_array = <double *>py_variable_array.data
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_variable_array(PyObject *__pyx_v_self, PyObject *__pyx_v_py_variable_array); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_get_variable_array[] = "Get the variables.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_variable_array(PyObject *__pyx_v_self, PyObject *__pyx_v_py_variable_array) {
  double *__pyx_v_variable_array;
  int __pyx_v_dimension;
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("get_variable_array");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_py_variable_array), __pyx_ptype_9ODESolver_ndarray, 1, "py_variable_array", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":86
 *     def get_variable_array(self, ndarray py_variable_array):
 *         '''Get the variables.'''
 *         cdef double *variable_array = <double *>py_variable_array.data             # <<<<<<<<<<<<<<
 *         cdef int dimension = py_variable_array.dimensions[0]
 *         self.thisptr.get_variable_array(variable_array, dimension)
 */
  __pyx_v_variable_array = ((double *)((PyArrayObject *)__pyx_v_py_variable_array)->data);

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":87
 *         '''Get the variables.'''
 *         cdef double *variable_array = <double *>py_variable_array.data
 *         cdef int dimension = py_variable_array.dimensions[0]             # <<<<<<<<<<<<<<
 *         self.thisptr.get_variable_array(variable_array, dimension)
 * 
 */
  __pyx_v_dimension = (((PyArrayObject *)__pyx_v_py_variable_array)->dimensions[0]);

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":88
 *         cdef double *variable_array = <double *>py_variable_array.data
 *         cdef int dimension = py_variable_array.dimensions[0]
 *         self.thisptr.get_variable_array(variable_array, dimension)             # <<<<<<<<<<<<<<
 * 
 *     def get_variable(self, index):
 */
  ((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->get_variable_array(__pyx_v_variable_array, __pyx_v_dimension);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ODESolver.ODESolver.get_variable_array");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":90
 *         self.thisptr.get_variable_array(variable_array, dimension)
 * 
 *     def get_variable(self, index):             # <<<<<<<<<<<<<<
 *         '''Get the variable value specified by index.'''
 *         return self.thisptr.get_value(index)
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_variable(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_get_variable[] = "Get the variable value specified by index.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_variable(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("get_variable");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":92
 *     def get_variable(self, index):
 *         '''Get the variable value specified by index.'''
 *         return self.thisptr.get_value(index)             # <<<<<<<<<<<<<<
 * 
 *     def get_current_time(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsLong(__pyx_v_index); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->get_value(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ODESolver.ODESolver.get_variable");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":94
 *         return self.thisptr.get_value(index)
 * 
 *     def get_current_time(self):             # <<<<<<<<<<<<<<
 *         '''Get the current time.'''
 *         return self.thisptr.get_current_time()
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_current_time(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_get_current_time[] = "Get the current time.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_current_time(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("get_current_time");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":96
 *     def get_current_time(self):
 *         '''Get the current time.'''
 *         return self.thisptr.get_current_time()             # <<<<<<<<<<<<<<
 * 
 *     def get_step_interval(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->get_current_time()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ODESolver.ODESolver.get_current_time");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":98
 *         return self.thisptr.get_current_time()
 * 
 *     def get_step_interval(self):             # <<<<<<<<<<<<<<
 *         '''Get the current step interval.'''
 *         return self.thisptr.get_step_interval()
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_step_interval(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_get_step_interval[] = "Get the current step interval.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_step_interval(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("get_step_interval");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":100
 *     def get_step_interval(self):
 *         '''Get the current step interval.'''
 *         return self.thisptr.get_step_interval()             # <<<<<<<<<<<<<<
 * 
 *     def integrate(self, a_time):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->get_step_interval()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ODESolver.ODESolver.get_step_interval");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":102
 *         return self.thisptr.get_step_interval()
 * 
 *     def integrate(self, a_time):             # <<<<<<<<<<<<<<
 *         '''Integrate'''
 *         self.thisptr.integrate(a_time)
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_integrate(PyObject *__pyx_v_self, PyObject *__pyx_v_a_time); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_integrate[] = "Integrate";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_integrate(PyObject *__pyx_v_self, PyObject *__pyx_v_a_time) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_SetupRefcountContext("integrate");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":104
 *     def integrate(self, a_time):
 *         '''Integrate'''
 *         self.thisptr.integrate(a_time)             # <<<<<<<<<<<<<<
 * 
 *     def step(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_a_time); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->integrate(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ODESolver.ODESolver.integrate");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":106
 *         self.thisptr.integrate(a_time)
 * 
 *     def step(self):             # <<<<<<<<<<<<<<
 *         '''Solve one step.'''
 *         cdef StepResult step_result
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_step(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_step[] = "Solve one step.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_step(PyObject *__pyx_v_self, PyObject *unused) {
  StepResult __pyx_v_step_result;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("step");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":109
 *         '''Solve one step.'''
 *         cdef StepResult step_result
 *         step_result = call_step(self.thisptr)             # <<<<<<<<<<<<<<
 *         if step_result.err:
 *             raise Exception
 */
  __pyx_v_step_result = call_step(((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr);

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":110
 *         cdef StepResult step_result
 *         step_result = call_step(self.thisptr)
 *         if step_result.err:             # <<<<<<<<<<<<<<
 *             raise Exception
 *         return step_result.state_event
 */
  __pyx_t_1 = __pyx_v_step_result.err;
  if (__pyx_t_1) {

    /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":111
 *         step_result = call_step(self.thisptr)
 *         if step_result.err:
 *             raise Exception             # <<<<<<<<<<<<<<
 *         return step_result.state_event
 * 
 */
    __Pyx_Raise(__pyx_builtin_Exception, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":112
 *         if step_result.err:
 *             raise Exception
 *         return step_result.state_event             # <<<<<<<<<<<<<<
 * 
 *     def reschedule(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_step_result.state_event); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ODESolver.ODESolver.step");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":114
 *         return step_result.state_event
 * 
 *     def reschedule(self):             # <<<<<<<<<<<<<<
 *         '''Schedule the next time.'''
 *         return self.thisptr.reschedule()
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_reschedule(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_reschedule[] = "Schedule the next time.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_reschedule(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("reschedule");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":116
 *     def reschedule(self):
 *         '''Schedule the next time.'''
 *         return self.thisptr.reschedule()             # <<<<<<<<<<<<<<
 * 
 *     def register_status_event(self, py_status_event):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->reschedule()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ODESolver.ODESolver.reschedule");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":118
 *         return self.thisptr.reschedule()
 * 
 *     def register_status_event(self, py_status_event):             # <<<<<<<<<<<<<<
 *         '''Register a status event'''
 *         cdef StatusEvent status_event
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_register_status_event(PyObject *__pyx_v_self, PyObject *__pyx_v_py_status_event); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_register_status_event[] = "Register a status event";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_register_status_event(PyObject *__pyx_v_self, PyObject *__pyx_v_py_status_event) {
  StatusEvent __pyx_v_status_event;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  long __pyx_t_1;
  double __pyx_t_2;
  __Pyx_SetupRefcountContext("register_status_event");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":121
 *         '''Register a status event'''
 *         cdef StatusEvent status_event
 *         status_event.variable_index = py_status_event['id']             # <<<<<<<<<<<<<<
 *         status_event.threshold = py_status_event['thres']
 *         status_event.status_code = py_status_event['code']
 */
  __pyx_1 = PyObject_GetItem(__pyx_v_py_status_event, __pyx_kp_3); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __pyx_t_1 = __Pyx_PyInt_AsLong(__pyx_1); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_v_status_event.variable_index = __pyx_t_1;

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":122
 *         cdef StatusEvent status_event
 *         status_event.variable_index = py_status_event['id']
 *         status_event.threshold = py_status_event['thres']             # <<<<<<<<<<<<<<
 *         status_event.status_code = py_status_event['code']
 *         self.thisptr.register_status_event(status_event)
 */
  __pyx_1 = PyObject_GetItem(__pyx_v_py_status_event, __pyx_kp_4); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_v_status_event.threshold = __pyx_t_2;

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":123
 *         status_event.variable_index = py_status_event['id']
 *         status_event.threshold = py_status_event['thres']
 *         status_event.status_code = py_status_event['code']             # <<<<<<<<<<<<<<
 *         self.thisptr.register_status_event(status_event)
 * 
 */
  __pyx_1 = PyObject_GetItem(__pyx_v_py_status_event, __pyx_kp_5); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __pyx_t_1 = __Pyx_PyInt_AsLong(__pyx_1); if (unlikely((__pyx_t_1 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_v_status_event.status_code = __pyx_t_1;

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":124
 *         status_event.threshold = py_status_event['thres']
 *         status_event.status_code = py_status_event['code']
 *         self.thisptr.register_status_event(status_event)             # <<<<<<<<<<<<<<
 * 
 *     def set_next_time(self, hoge):
 */
  ((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->register_status_event(__pyx_v_status_event);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_AddTraceback("ODESolver.ODESolver.register_status_event");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":126
 *         self.thisptr.register_status_event(status_event)
 * 
 *     def set_next_time(self, hoge):             # <<<<<<<<<<<<<<
 *         '''set next time'''
 *         self.thisptr.set_next_time(hoge)
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_set_next_time(PyObject *__pyx_v_self, PyObject *__pyx_v_hoge); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_set_next_time[] = "set next time";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_set_next_time(PyObject *__pyx_v_self, PyObject *__pyx_v_hoge) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_SetupRefcountContext("set_next_time");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":128
 *     def set_next_time(self, hoge):
 *         '''set next time'''
 *         self.thisptr.set_next_time(hoge)             # <<<<<<<<<<<<<<
 * 
 *     def set_step_interval(self, a_time):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_hoge); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->set_next_time(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ODESolver.ODESolver.set_next_time");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":130
 *         self.thisptr.set_next_time(hoge)
 * 
 *     def set_step_interval(self, a_time):             # <<<<<<<<<<<<<<
 *         '''Set the step interval.'''
 *         self.thisptr.set_step_interval(a_time)
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_set_step_interval(PyObject *__pyx_v_self, PyObject *__pyx_v_a_time); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_set_step_interval[] = "Set the step interval.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_set_step_interval(PyObject *__pyx_v_self, PyObject *__pyx_v_a_time) {
  PyObject *__pyx_r = NULL;
  double __pyx_t_1;
  __Pyx_SetupRefcountContext("set_step_interval");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":132
 *     def set_step_interval(self, a_time):
 *         '''Set the step interval.'''
 *         self.thisptr.set_step_interval(a_time)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_a_time); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->set_step_interval(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ODESolver.ODESolver.set_step_interval");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":135
 * 
 * 
 *     def get_next_time(self):             # <<<<<<<<<<<<<<
 *         '''Get the next time.'''
 *         return self.thisptr.get_next_time()
 */

static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_next_time(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_9ODESolver_9ODESolver_get_next_time[] = "Get the next time.";
static PyObject *__pyx_pf_9ODESolver_9ODESolver_get_next_time(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("get_next_time");

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":137
 *     def get_next_time(self):
 *         '''Get the next time.'''
 *         return self.thisptr.get_next_time()             # <<<<<<<<<<<<<<
 * 
 * import_array()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9ODESolver_ODESolver *)__pyx_v_self)->thisptr->get_next_time()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ODESolver.ODESolver.get_next_time");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9ODESolver_ODESolver(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_9ODESolver_9ODESolver___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9ODESolver_ODESolver(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static struct PyMethodDef __pyx_methods_9ODESolver_ODESolver[] = {
  {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver___del__, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("register_function"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_register_function, METH_O, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_register_function)},
  {__Pyx_NAMESTR("initialize"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_initialize, METH_O, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_initialize)},
  {__Pyx_NAMESTR("get_variable_array"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_get_variable_array, METH_O, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_get_variable_array)},
  {__Pyx_NAMESTR("get_variable"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_get_variable, METH_O, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_get_variable)},
  {__Pyx_NAMESTR("get_current_time"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_get_current_time, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_get_current_time)},
  {__Pyx_NAMESTR("get_step_interval"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_get_step_interval, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_get_step_interval)},
  {__Pyx_NAMESTR("integrate"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_integrate, METH_O, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_integrate)},
  {__Pyx_NAMESTR("step"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_step, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_step)},
  {__Pyx_NAMESTR("reschedule"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_reschedule, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_reschedule)},
  {__Pyx_NAMESTR("register_status_event"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_register_status_event, METH_O, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_register_status_event)},
  {__Pyx_NAMESTR("set_next_time"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_set_next_time, METH_O, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_set_next_time)},
  {__Pyx_NAMESTR("set_step_interval"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_set_step_interval, METH_O, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_set_step_interval)},
  {__Pyx_NAMESTR("get_next_time"), (PyCFunction)__pyx_pf_9ODESolver_9ODESolver_get_next_time, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_9ODESolver_9ODESolver_get_next_time)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ODESolver = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ODESolver = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ODESolver = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ODESolver = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_9ODESolver_ODESolver = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("ODESolver.ODESolver"), /*tp_name*/
  sizeof(struct __pyx_obj_9ODESolver_ODESolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9ODESolver_ODESolver, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_ODESolver, /*tp_as_number*/
  &__pyx_tp_as_sequence_ODESolver, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ODESolver, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ODESolver, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  __Pyx_DOCSTR("Wrapper class of ODESolver"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9ODESolver_ODESolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9ODESolver_ODESolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static struct PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("ODESolver"),
    __Pyx_DOCSTR(__pyx_mdoc), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp___main__, __pyx_k___main__, sizeof(__pyx_k___main__), 1, 1, 1},
  {&__pyx_kp___cinit__, __pyx_k___cinit__, sizeof(__pyx_k___cinit__), 1, 1, 1},
  {&__pyx_kp___del__, __pyx_k___del__, sizeof(__pyx_k___del__), 1, 1, 1},
  {&__pyx_kp_register_function, __pyx_k_register_function, sizeof(__pyx_k_register_function), 1, 1, 1},
  {&__pyx_kp_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 1, 1, 1},
  {&__pyx_kp_get_variable_array, __pyx_k_get_variable_array, sizeof(__pyx_k_get_variable_array), 1, 1, 1},
  {&__pyx_kp_get_variable, __pyx_k_get_variable, sizeof(__pyx_k_get_variable), 1, 1, 1},
  {&__pyx_kp_get_current_time, __pyx_k_get_current_time, sizeof(__pyx_k_get_current_time), 1, 1, 1},
  {&__pyx_kp_get_step_interval, __pyx_k_get_step_interval, sizeof(__pyx_k_get_step_interval), 1, 1, 1},
  {&__pyx_kp_integrate, __pyx_k_integrate, sizeof(__pyx_k_integrate), 1, 1, 1},
  {&__pyx_kp_step, __pyx_k_step, sizeof(__pyx_k_step), 1, 1, 1},
  {&__pyx_kp_reschedule, __pyx_k_reschedule, sizeof(__pyx_k_reschedule), 1, 1, 1},
  {&__pyx_kp_1, __pyx_k_1, sizeof(__pyx_k_1), 1, 1, 1},
  {&__pyx_kp_set_next_time, __pyx_k_set_next_time, sizeof(__pyx_k_set_next_time), 1, 1, 1},
  {&__pyx_kp_set_step_interval, __pyx_k_set_step_interval, sizeof(__pyx_k_set_step_interval), 1, 1, 1},
  {&__pyx_kp_get_next_time, __pyx_k_get_next_time, sizeof(__pyx_k_get_next_time), 1, 1, 1},
  {&__pyx_kp_callable, __pyx_k_callable, sizeof(__pyx_k_callable), 1, 1, 1},
  {&__pyx_kp_py_variable_array, __pyx_k_py_variable_array, sizeof(__pyx_k_py_variable_array), 1, 1, 1},
  {&__pyx_kp_index, __pyx_k_index, sizeof(__pyx_k_index), 1, 1, 1},
  {&__pyx_kp_a_time, __pyx_k_a_time, sizeof(__pyx_k_a_time), 1, 1, 1},
  {&__pyx_kp_py_status_event, __pyx_k_py_status_event, sizeof(__pyx_k_py_status_event), 1, 1, 1},
  {&__pyx_kp_hoge, __pyx_k_hoge, sizeof(__pyx_k_hoge), 1, 1, 1},
  {&__pyx_kp_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 1, 0},
  {&__pyx_kp___all__, __pyx_k___all__, sizeof(__pyx_k___all__), 1, 1, 1},
  {&__pyx_kp_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 1, 1, 1},
  {&__pyx_kp_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 1, 0},
  {&__pyx_kp_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 1, 0},
  {&__pyx_kp_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0},
  {0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_kp_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initODESolver(void); /*proto*/
PyMODINIT_FUNC initODESolver(void)
#else
PyMODINIT_FUNC PyInit_ODESolver(void); /*proto*/
PyMODINIT_FUNC PyInit_ODESolver(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  #ifdef CYTHON_REFNANNY
  void* __pyx_refchk = NULL;
  __Pyx_Refnanny = __Pyx_ImportRefcountAPI("refnanny");
  if (!__Pyx_Refnanny) {
      PyErr_Clear();
      __Pyx_Refnanny = __Pyx_ImportRefcountAPI("Cython.Runtime.refnanny");
      if (!__Pyx_Refnanny)
          Py_FatalError("failed to import refnanny module");
  }
  __pyx_refchk = __Pyx_Refnanny->NewContext("PyMODINIT_FUNC PyInit_ODESolver(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Library function declarations ---*/
  __pyx_init_filenames();
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("ODESolver"), __pyx_methods, __pyx_mdoc, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__pyx_module_is_main_ODESolver) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_kp___main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_skip_dispatch = 0;
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_9ODESolver_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject)); if (unlikely(!__pyx_ptype_9ODESolver_ndarray)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyType_Ready(&__pyx_type_9ODESolver_ODESolver) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ODESolver", (PyObject *)&__pyx_type_9ODESolver_ODESolver) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9ODESolver_ODESolver = &__pyx_type_9ODESolver_ODESolver;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":5
 * '''
 * 
 * __all__ = ["ODESolver"]             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Defs.hpp":
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_kp_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_2);
  __Pyx_GIVEREF(__pyx_kp_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_kp___all__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/knishida/projects/reaction_reader/solver/ODESolver.pyx":139
 *         return self.thisptr.get_next_time()
 * 
 * import_array()             # <<<<<<<<<<<<<<
 */
  import_array();
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ODESolver");
  Py_DECREF(__pyx_m); __pyx_m = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

static const char *__pyx_filenames[] = {
  "ODESolver.pyx",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

#if PY_MAJOR_VERSION >= 3
    /* Note: this is a temporary work-around to prevent crashes in Python 3.0 */
    if ((tstate->exc_type != NULL) & (tstate->exc_type != Py_None)) {
        tmp_type = tstate->exc_type;
        tmp_value = tstate->exc_value;
        tmp_tb = tstate->exc_traceback;
        PyErr_NormalizeException(&type, &value, &tb);
        PyErr_NormalizeException(&tmp_type, &tmp_value, &tmp_tb);
        tstate->exc_type = 0;
        tstate->exc_value = 0;
        tstate->exc_traceback = 0;
        PyException_SetContext(value, tmp_value);
        Py_DECREF(tmp_type);
        Py_XDECREF(tmp_tb);
    }
#endif

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


static INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned char)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned char");
                return (unsigned char)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned char");
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned short)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned short");
                return (unsigned short)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned short");
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned int)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned int");
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to char");
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to short");
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to int");
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed char");
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed short");
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed int");
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return PyLong_AsUnsignedLong(x);
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return PyLong_AsUnsignedLongLong(x);
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    long size)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError, 
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError, 
            "%s.%s does not appear to be the correct type object",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyObject *empty_string = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    #if PY_MAJOR_VERSION < 3
    empty_string = PyString_FromStringAndSize("", 0);
    #else
    empty_string = PyBytes_FromStringAndSize("", 0);
    #endif
    if (!empty_string) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        empty_string, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        empty_string  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(empty_string);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode && (!t->is_identifier)) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_identifier || (t->is_unicode && t->intern)) {
            *t->p = PyUnicode_InternFromString(t->s);
        } else if (t->is_unicode) {
            *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   if (x == Py_True) return 1;
   else if ((x == Py_False) | (x == Py_None)) return 0;
   else return PyObject_IsTrue(x);
}

static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


